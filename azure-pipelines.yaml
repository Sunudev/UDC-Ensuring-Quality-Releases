name: Azure Pipelines

variables:
  python.version: '3.7.6'

stages:
  - stage: Provision
    jobs:
    - job: provision_azure_infrastructure
      displayName: Provision Azure Infrastructure
      pool:
        vmImage: 'ubuntu-18.04'
        steps:
        - task: DownloadSecureFile@1
          name: tfvardef
          displayName: Download terraform.tfvars
          inputs:
            secureFile: 'terraform.tfvars' 
    
        # Needed for Terraform VM deployment
        - task: InstallSSHKey@0
          inputs:
            knownHostsEntry: 'known_hosts'
            sshPublicKey: $(PUBLIC_KEY)
            sshKeySecureFile: 'id_rsa'

        - bash: |
            cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
          displayName: Copy terraform.tfvars
        - bash: |
            echo Pipeline workspace dir is $(Pipeline.Workspace)
            echo Terraform variable definition file is $(tfvardef.secureFilePath)
            cd $(Agent.TempDirectory)
            pwd
            ls -la
            cat id_rsa.pub
            cd ~/.ssh/
            pwd
            ls -la
            cat known_hosts
            # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
            cd $(System.DefaultWorkingDirectory)  
            pwd
            ls -la
          displayName: Verify build environment (pre)

          # install Terraform Azure Pipelines Extension by Microsoft DevLabs
          # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
        - task: TerraformInstaller@0
          displayName: Install Terraform
          inputs:
            terraformVersion: '0.13.5'

        - task: TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'azurerm-sc'
            backendAzureRmResourceGroupName: 'azure-nd'
            backendAzureRmStorageAccountName: 'cs21003200126eacadf'
            backendAzureRmContainerName: 'azure-nd'
            backendAzureRmKey: 'terraform.tfstate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

        - task: TerraformTaskV1@0
          displayName: Terraform Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: |
              -auto-approve 
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          environmentServiceNameAzureRM: 'azurerm-sc'

  - stage: Build
    jobs:
      - job: build_artifacts
        displayName: Build Artifacts
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
        - task: ArchiveFiles@2
          displayName: Archive FakeRestAPI
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            verbose: true
    
        - task: PublishPipelineArtifact@1
          displayName: Publish FakeRestAPI artifact
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            artifactName: 'drop-fakerestapi'
    
        - task: ArchiveFiles@2
          displayName: Archive Selenium
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
            verbose: true
    
        - task: PublishPipelineArtifact@1
          displayName: Publish Selenium artifact
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
            artifactName: 'drop-selenium'

  - stage: Deployment
    jobs:
    - deployment: deployment_fakerestapi
      displayName: Deploy FakeRestAPI
      pool:
        vmImage: 'ubuntu-18.04'
      environment: 'TEST'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: Deploy Azure WebApp
              inputs:
                azureSubscription: 'azurerm-sc'
                appName: 'UDC-Ensuring-Quality-Releases'
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
                deploymentMethod: auto

    - deployment: deployment_vm
      displayName: Deploy Virtual Machine
      environment:
        name: TEST
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - bash: |
                pwd
                hostname
                uname -a
                cat /etc/*-release
                sudo apt-get install software-properties-common -y
                sudo apt-add-repository universe -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                python3 -m pip install --upgrade pip
                pip3 install selenium
                python3 -V
                pip3 -V
                /usr/bin/chromium-browser --version
                /usr/bin/chromedriver --version
                python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                # Install Log Analytics agent on Linux computers (only need to run once)
                # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                # sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
                # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
              env:  # To use secret variables in a script, we must explicitly map them as environment variables.
                AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
                AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)

            - task: Bash@3
              displayName: 'Install Dependencies'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                
                   sudo apt-get upgrade -y
                   sudo apt-get install python3-pip -y
                   sudo apt-get install unzip -y
                   sudo apt-get install -y chromium-browser
                   pip3 install selenium
                
                   # download chrome driver
                   FILE=chromedriver_linux64.zip
                   if [ -f "$FILE" ]; then
                     echo "$FILE exists."
                   else
                     wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                  fi
                  # install chrome driver
                  unzip chromedriver_linux64.zip
                  sudo mv chromedriver /usr/bin/chromedriver
                  sudo chown root:root /usr/bin/chromedriver
                  sudo chmod +x /usr/bin/chromedriver
                  chromium-browser -version
                  chromedriver --version
                  # agent log analytics
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com
            
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  sudo mv ui-logs.log /var/logs
  - stage: UITests
    displayName: UI Tests
    jobs:
    - deployment: VMRunUITests
      displayName: Run UI Tests
      environment:
        name:  'TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  cat ui-logs.log
                  sudo mv ui-logs.log /var/logs