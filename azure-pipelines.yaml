name: Azure Pipelines
variables:
  python.version: '3.7.6'

stages:
  - stage: Provision
    jobs:
    - job: provision_azure_infrastructure
      displayName: Provision Azure Infrastructure
      pool:
        vmImage: 'ubuntu-18.04'
        steps:
        - task: DownloadSecureFile@1
          name: tfvardef
          displayName: Download terraform.tfvars
          inputs:
            secureFile: 'terraform.tfvars' 
    
        # Needed for Terraform VM deployment
        - task: InstallSSHKey@0
          inputs:
            knownHostsEntry: 'known_hosts'
            sshPublicKey: $(PUBLIC_KEY)
            sshKeySecureFile: 'id_rsa'

        - bash: |
            cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
          displayName: Copy terraform.tfvars
        - bash: |
            echo Pipeline workspace dir is $(Pipeline.Workspace)
            echo Terraform variable definition file is $(tfvardef.secureFilePath)
            cd $(Agent.TempDirectory)
            pwd
            ls -la
            cat id_rsa.pub
            cd ~/.ssh/
            pwd
            ls -la
            cat known_hosts
            # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
            cd $(System.DefaultWorkingDirectory)  
            pwd
            ls -la
          displayName: Verify build environment (pre)
          # install Terraform Azure Pipelines Extension by Microsoft DevLabs
          # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
        - task: TerraformInstaller@0
          displayName: Install Terraform
          inputs:
            terraformVersion: '0.13.5'

        - task: TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'azurerm-sc'
            backendAzureRmResourceGroupName: 'azure-nd'
            backendAzureRmStorageAccountName: 'cs21003200126eacadf'
            backendAzureRmContainerName: 'azure-nd'
            backendAzureRmKey: 'terraform.tfstate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

        - task: TerraformTaskV1@0
          displayName: Terraform Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: |
              -auto-approve 
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          environmentServiceNameAzureRM: 'azurerm-sc'

  - stage: Build
    jobs:
      - job: build_artifacts
        displayName: Build Artifacts
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
        - task: ArchiveFiles@2
          displayName: Archive FakeRestAPI
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            verbose: true
    
        - task: PublishPipelineArtifact@1
          displayName: Publish FakeRestAPI artifact
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            artifactName: 'drop-fakerestapi'
    
        - task: ArchiveFiles@2
          displayName: Archive Selenium
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
            verbose: true
    
        - task: PublishPipelineArtifact@1
          displayName: Publish Selenium artifact
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
            artifactName: 'drop-selenium'
            
  - stage: Deployment
    jobs:
    - deployment: deployment_fakerestapi
      displayName: Deploy FakeRestAPI
      pool:
        vmImage: 'ubuntu-18.04'
      environment: 'TEST'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: Deploy Azure WebApp
              inputs:
                azureSubscription: 'azurerm-sc'
                appName: 'UDC-Ensuring-Quality-Releases'
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
                deploymentMethod: zipDeploy
    - deployment: VMDeploy
      displayName: VM Deployment
      environment:
       name:  'TEST'
       resourceType: VirtualMachine
       tags: TEST
      strategy:
       runOnce:
         deploy:
           steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                 #! /bin/bash
                
                 sudo apt-get upgrade -y
                 sudo apt-get install python3-pip -y
                 sudo apt-get install unzip -y
                 sudo apt-get install -y chromium-browser
                 pip3 install selenium
                 export PATH=$PATH:some/path